#!/usr/bin/env python

import oci.auth.signers
import oci.identity
import json
import logging
import os
import requests
import sys
from oci import Signer


# These two lines enable debugging at httplib level (requests->urllib3->http.client)
# You will see the REQUEST, including HEADERS and DATA, and RESPONSE with HEADERS but without DATA.
# The only thing missing will be the response.body which is not logged.
try:
    import http.client as http_client
except ImportError:
    # Python 2
    import httplib as http_client
http_client.HTTPConnection.debuglevel = 1

# You must initialize logging, otherwise you'll not see debug output.
logging.basicConfig()
logging.getLogger().setLevel(logging.DEBUG)
requests_log = logging.getLogger("requests.packages.urllib3")
requests_log.setLevel(logging.DEBUG)
requests_log.propagate = True

def __dump_json(to_print):
    return json.dumps(to_print, sort_keys=True, indent=4, separators=(',', ': '))

def __print_json(to_print):
    print(__dump_json(to_print))

def __check_package(pkg, pippkg = None):
    pippkg = pkg if pippkg == None else pippkg
    try:
        __import__(pkg)
    except ImportError as e:
        sys.stdout.write('{0} python package not available\n'.format(pkg))
        sys.stdout.write("Install by executing:\n")
        sys.stdout.write("  env PIP_REQUIRE_VIRTUALENV=false pip install --user {0}\n".format(pippkg))
        sys.stdout.flush()
        sys.exit(1)

def __check_packages():
    __check_package('oci')
    __check_package('requests')


def main(argv):
    __check_packages()
    
    #signer = oci.auth.signers.InstancePrincipalsSecurityTokenSigner()
    delegation_token = open('/home/user/.oci/delegation_token', 'r').read()
    signer = oci.auth.signers.InstancePrincipalsDelegationTokenSigner(delegation_token=delegation_token)
    
    resp = requests.get("https://iad.ocir.io/20180419/docker/token", auth=signer)
    #print(resp.text)
    token = resp.json()['token']
    
    docker_config_filename = '/home/user/.docker/config.json'
    docker_config = {}
    
    if os.path.exists(docker_config_filename):
        with open(docker_config_filename, 'r') as configjson:
            docker_config = json.load(configjson) 

    auths = docker_config.get('auths')
    if auths is None:
        auths = {}
        docker_config['auths'] = auths

    iad_ocir_config = auths.get('iad.ocir.io')
    if iad_ocir_config is None:
        iad_ocir_config = {}
        auths['iad.ocir.io'] = iad_ocir_config
    iad_ocir_config['registryToken'] = token

    if not os.path.exists(os.path.dirname(docker_config_filename)):
        os.makedirs(os.path.dirname(docker_config_filename))
    with open(docker_config_filename, 'w') as configjson:
        configjson.write(__dump_json(docker_config))

if __name__ == '__main__':
    main(sys.argv)
